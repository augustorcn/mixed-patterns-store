version: '3.8'

services:

  # Rabbitmq broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    env_file:
      - ./.env
    environment:
      RABBITMQ_ERLANG_COOKIE: $RABBITMQ_ERLANG_COOKIE
      RABBITMQ_DEFAULT_USER: $RABBITMQ_DEFAULT_USER
      RABBITMQ_DEFAULT_PASS: $RABBITMQ_DEFAULT_PASS
      RABBITMQ_DEFAULT_VHOST: $RABBITMQ_DEFAULT_VHOST
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - store

  # Auth service
  auth:
    image: node
    tty: true
    container_name: auth
    env_file:
      - ./.env
    command: bash -c "yarn -y && yarn api"
    working_dir: /usr/src/app
    volumes:
      - ./auth/:/usr/src/app
    networks:
      - store
    depends_on:
      - auth-postgres
    ports:
      - $AUTH_EXTERNAL_PORT:$AUTH_INTERNAL_PORT
  auth-postgres:
    image: postgres
    container_name: auth-postgres
    env_file:
      - ./.env
    volumes:
      - ./auth/devops/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_PASSWORD: $AUTH_POSTGRES_PASSWORD
    networks:
      - store

  # Catalog service
  catalog:
    image: node
    tty: true
    container_name: catalog
    env_file:
      - ./.env
    command: bash -c "yarn -y && yarn api"
    working_dir: /usr/src/app
    volumes:
      - ./:/usr/src/app
    networks:
      - store
    depends_on:
      - catalog-postgres
    ports:
      - $CATALOG_EXTERNAL_PORT:$CATALOG_INTERNAL_PORT
  catalog-postgres:
    image: postgres
    container_name: catalog-postgres
    env_file:
      - ./.env
    volumes:
      - ./catalog/devops/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_PASSWORD: $CATALOG_POSTGRES_PASSWORD
    networks:
      - store

  # Checkout service
  checkout:
    image: node
    tty: true
    container_name: checkout
    env_file:
      - ./.env
    command: bash -c "yarn -y && yarn api"
    working_dir: /usr/src/app
    volumes:
      - ./checkout/:/usr/src/app
    networks:
      - store
    depends_on:
      - rabbitmq
      - checkout-postgres
      - auth
      - catalog
      - freight
    links: 
      - rabbitmq
    ports:
      - $CHECKOUT_EXTERNAL_PORT:$CHECKOUT_INTERNAL_PORT	
  checkout-postgres:
    image: postgres
    container_name: checkout-postgres
    env_file:
      - ./.env
    volumes:
      - ./checkout/devops/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_PASSWORD: $CHECKOUT_POSTGRES_PASSWORD
    networks:
      - store

  # Freight service
  freight:
    image: node
    tty: true
    container_name: freight
    env_file:
      - ./.env
    command: bash -c "yarn -y && yarn api"
    working_dir: /usr/src/app
    volumes:
      - ./freight/:/usr/src/app
    networks:
      - store
    depends_on:
      - freight-postgres
    ports:
      - $FREIGHT_EXTERNAL_PORT:$FREIGHT_INTERNAL_PORT  
  freight-postgres:
    image: postgres
    container_name: freight-postgres
    env_file:
      - ./.env
    volumes:
      - ./freight/devops/init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      POSTGRES_PASSWORD: $FREIGHT_POSTGRES_PASSWORD
    networks:
      - store

  # Stock service
  stock:
    image: node
    tty: true
    container_name: stock
    env_file:
      - ./.env
    command: bash -c "yarn -y && yarn api"
    working_dir: /usr/src/app
    volumes:
      - ./stock/:/usr/src/app
    networks:
      - store
    depends_on:
      - rabbitmq
      - stock-mongo
    links: 
      - rabbitmq
    ports:
      - $STOCK_EXTERNAL_PORT:$STOCK_INTERNAL_PORT	
  stock-mongo:
    image: mongo
    container_name: stock-mongo
    env_file:
      - ./.env
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: $STOCK_MONGO_USER
      MONGO_INITDB_ROOT_PASSWORD: $STOCK_MONGO_PASSWORD
      MONGO_INITDB_DATABASE: $STOCK_MONGO_DATABASE
    volumes:
      - ./stock/devops/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - store

networks:
  store:
    name: store
    driver: bridge